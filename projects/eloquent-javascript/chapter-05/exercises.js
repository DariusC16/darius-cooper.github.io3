// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  // RETURN ARRAY 
   // USING FLAT METHOD
   return array.flat();
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, output, update, body) {
  // USING FOR LOOP
   for (var i = val; output(i); i = update(i)) {
    // INVOKE BODY
     body(i);
   }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, output) {
  // RETURNING ARRAY 
   // USING EVERY FUNCTION
    return array.every(output);
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  // USING CODE GIVEN FROM PASSAGE
  let scripts = countBy(text, char => {
    let script = characterScript(char.codePointAt(0));
    return script ? script.direction : "none";
  }).filter(({name}) => name != "none");

 // MY CODE
  // IF SCRIPTS LENGTH IS 0
   if (scripts.length === 0) {
   // RETURN ....
    return 'nothing found';
  } // IF SCRIPTS LENGTH IS 1
     else if (scripts.length === 1) {
      // RETURN SCRIPTS FIRST INDEX NAME
       return scripts[0].name
      } else {
      // IF ALL ELSE FAILS
       // RETURN USING REDUCE METHOD
        // UISNG ARROW FUNCTION
         return scripts.reduce((acc, curr) => acc.count >= curr.count ? acc.name : curr.name)
        }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
